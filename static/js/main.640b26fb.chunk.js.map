{"version":3,"sources":["APIKey.js","Components/layout/Navbar.js","Components/layout/Footer.js","reducers/searchReducers.js","reducers/index.js","actions/types.js","store/Store.js","Components/home/WeatherCard.js","Components/home/WeatherContainer.js","Components/home/SearchForm.js","actions/searctActions.js","Components/home/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APIKey","Navbar","className","id","Footer","initialState","text","forecast","combineReducers","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","WeatherCard","weather","this","props","toCelcious","console","log","dt_txt","main","href","Component","WeatherContainer","temp","Math","round","content","cod","list","map","index","key","connect","SearchForm","onChange","e","searchCity","target","value","onSubmit","preventDefault","fetchWeather","placeholder","aria-label","dispatch","axios","get","then","response","data","catch","err","Landing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.640b26fb.chunk.js","sourcesContent":["module.exports = {\r\n    APIKey: '930ed0899260b10d2962d29d0b1d6e84'\r\n}","import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container\">\r\n          <div className=\"nav-header\">\r\n            <div className=\"nav-brand text-white font-weight-normal\">\r\n              <i className=\"fas fa-sun\" /> &nbsp;WeatherLand\r\n            </div>\r\n          </div>\r\n          <ul className=\"navbar-nav ml-auto d-inline-block text-light\">\r\n            <li className=\"nav-item d-inline-block mr-4\">\r\n                {/* */}\r\n            </li>\r\n            <li className=\"nav-item d-inline-block mt-2 mr-4\">\r\n              <i className=\"fab fa-react fa-2x\" id=\"react-logo\" />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <div className=\"container\">\r\n          <div className=\"nav-brand text-white\">Designed & Develop by : Shariizad </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import {SEARCH_CITY, FETCH_WEATHER} from '../actions/types';\r\n\r\nconst initialState = {\r\n    text: \"\",\r\n    forecast : [],\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case SEARCH_CITY:\r\n            return{\r\n                ...state,\r\n                text: action.payload,\r\n            }\r\n        case FETCH_WEATHER:\r\n            return{\r\n                ...state,\r\n                forecast: action.payload,\r\n            }\r\n        default:\r\n            return state;    \r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport searchReducer from './searchReducers';\r\n\r\nexport default combineReducers({\r\n        forecast : searchReducer\r\n})","export const SEARCH_CITY = 'SEARCH_CITY';\r\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\r\n","import {createStore, applyMiddleware} from'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\r\nimport rootReducer from '../reducers'\r\n\r\nconst middleware = [thunk];\r\nconst inintialState = {};\r\n\r\nconst store = createStore(rootReducer, inintialState, composeWithDevTools\r\n    (applyMiddleware(...middleware)))\r\n\r\n    export default store;","import React, { Component } from 'react'\r\n\r\nexport default class WeatherCard extends Component {\r\n    render() {\r\n        const {weather} = this.props;\r\n        const {toCelcious} = this.props;\r\n        console.log(\"weatherCard\",weather);\r\n        return (\r\n            <div className=\"col-md-10  container mt-5 mb-5\">\r\n        <div className=\"row d-flex justify-content-center\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"card bg-light\">\r\n              <h4>CURRENT WEATHER</h4>\r\n              <p>{weather.dt_txt}</p>\r\n              <i className=\"fas fa-cloud fa-2x p-2\"></i>\r\n             <div className=\"card-body\">\r\n                <h5><strong>{toCelcious} C</strong></h5>\r\n                <h6>{weather.weather[0].main}</h6>\r\n              </div>  \r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col-md-3 \">\r\n            <div className=\"card bg-light\">\r\n              <h4>TODAY</h4>\r\n              <i></i>\r\n              <div className=\"card-body\">\r\n                <h3>Tempture</h3>\r\n                <h6>Weather</h6>\r\n              </div>  \r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3 \">\r\n            <div className=\"card bg-light\">\r\n              <h4>TONIGHT</h4>\r\n              <i></i>\r\n              <div className=\"card-body\">\r\n                <h3>Tempture</h3>\r\n                <h6>Weather</h6>\r\n              </div>  \r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3 \">\r\n            <div className=\"card bg-light\">\r\n              <h4>TOMMOROW</h4>\r\n              <i></i>\r\n              <div className=\"card-body\">\r\n                <h3>Tempture</h3>\r\n                <h6>Weather</h6>\r\n              </div>  \r\n            </div>\r\n          </div> */}\r\n          <a href=\"/\" className=\"btn- btn-primary text-center col-md-10 mt-3 p-2\">See More ...</a>\r\n        </div>\r\n      </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport WeatherCard from './WeatherCard';\r\n\r\nexport class WeatherContainer extends Component {\r\n  toCelcious = (temp) =>{\r\n    console.log(\"to C\",temp -273.15)\r\n    return Math.round(temp -273.15);\r\n  }\r\n  render() {\r\n    console.log(\"Cont\",this.props)\r\n      const {forecast} = this.props;\r\n      let content = ''\r\n      console.log(\"WeatherContainer\",forecast);\r\n        \r\n       content = forecast.cod === '200'\r\n      ? forecast.list.map((weather,index) => <WeatherCard key={index*4} weather={weather} toCelcious={this.toCelcious(weather.main.temp)}/>)\r\n      : null;\r\n      \r\n    return (\r\n      <div>\r\n        {content}\r\n        </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state =>({\r\n    forecast : state.forecast.forecast\r\n    //console.log(\"state\",state);\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(WeatherContainer);\r\n","import React , {Component} from \"react\";\r\nimport {searchCity, fetchWeather} from '../../actions/searctActions';\r\nimport {connect} from 'react-redux';\r\n\r\nclass SearchForm extends Component {\r\n    onChange = e => {\r\n        this.props.searchCity(e.target.value)\r\n    }\r\n\r\n    onSubmit = e => {\r\n      e.preventDefault();\r\n      console.log(this.props)\r\n      this.props.fetchWeather(this.props.text)\r\n    }\r\nrender() {\r\n  return (\r\n    <div className=\"bg-img\">\r\n      <div className=\"container p-5\" >\r\n        <div className=\"col-md-10 offset-md-1\" >\r\n          <div className=\"text-center color-orange mb-2 font-weight-bold \">\r\n            Search for a City...\r\n          </div>\r\n          <form className=\"input-group mb-3 }\" onSubmit={this.onSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search ......\"\r\n              aria-label=\"Recipient's username\"\r\n              onChange={this.onChange}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button className=\"input-group-text\" type=\"submit\">\r\n                <i className=\"fa fa-search\"></i>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    text: state.forecast.text\r\n})\r\nexport default connect(mapStateToProps, {searchCity, fetchWeather})(SearchForm);\r\n","import {SEARCH_CITY, FETCH_WEATHER} from './types';\r\nimport {APIKey} from '../APIKey'\r\nimport axios from 'axios';\r\n\r\nexport const searchCity = text => dispatch => {\r\n    dispatch( {\r\n        type: SEARCH_CITY,\r\n        payload: text\r\n    })\r\n}\r\nexport const fetchWeather = text => dispatch => {\r\n    axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${text}&appid=${APIKey}`)\r\n    .then(response => dispatch({\r\n        type: FETCH_WEATHER,\r\n        payload: response.data\r\n    }))\r\n    .catch(err => console.log(err))\r\n}\r\n","import React, { Component } from 'react'\r\nimport  WeatherContainer  from './WeatherContainer'\r\nimport SearchForm from './SearchForm'\r\n\r\nexport class Landing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SearchForm />\r\n                <WeatherContainer />              \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Landing\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Components/layout/Navbar'\nimport Footer from './Components/layout/Footer';\nimport {Provider} from 'react-redux';\nimport store from './store/Store'\nimport Landing from './Components/home/Landing';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Navbar />\n      <Landing />\n      <Footer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}